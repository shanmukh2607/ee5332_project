// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fir_fir,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a35t-cpg236-1,HLS_INPUT_CLOCK=5.690000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.895000,HLS_SYN_LAT=29,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=908,HLS_SYN_LUT=278,HLS_VERSION=2020_2}" *)

module fir (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_r,
        out_r,
        out_r_ap_vld
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_pp0_stage0 = 8'd2;
parameter    ap_ST_fsm_state11 = 8'd4;
parameter    ap_ST_fsm_state12 = 8'd8;
parameter    ap_ST_fsm_state13 = 8'd16;
parameter    ap_ST_fsm_state14 = 8'd32;
parameter    ap_ST_fsm_state15 = 8'd64;
parameter    ap_ST_fsm_state16 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] in_r;
output  [31:0] out_r;
output   out_r_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg out_r_ap_vld;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] fir_int_int_w_address0;
reg    fir_int_int_w_ce0;
wire   [31:0] fir_int_int_w_q0;
reg   [3:0] Acc_address0;
reg    Acc_ce0;
reg    Acc_we0;
wire   [31:0] Acc_q0;
reg   [3:0] Acc_address1;
reg    Acc_ce1;
reg    Acc_we1;
wire   [31:0] Acc_q1;
reg   [3:0] j_reg_113;
wire   [0:0] icmp_ln14_fu_124_p2;
reg   [0:0] icmp_ln14_reg_179;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
wire    ap_block_state10_pp0_stage0_iter8;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln14_reg_179_pp0_iter1_reg;
reg   [0:0] icmp_ln14_reg_179_pp0_iter2_reg;
reg   [0:0] icmp_ln14_reg_179_pp0_iter3_reg;
reg   [0:0] icmp_ln14_reg_179_pp0_iter4_reg;
reg   [0:0] icmp_ln14_reg_179_pp0_iter5_reg;
reg   [0:0] icmp_ln14_reg_179_pp0_iter6_reg;
reg   [0:0] icmp_ln14_reg_179_pp0_iter7_reg;
wire   [3:0] add_ln14_fu_130_p2;
reg   [3:0] add_ln14_reg_183;
reg    ap_enable_reg_pp0_iter0;
reg   [3:0] add_ln14_reg_183_pp0_iter1_reg;
reg   [3:0] add_ln14_reg_183_pp0_iter2_reg;
reg   [3:0] add_ln14_reg_183_pp0_iter3_reg;
reg   [3:0] add_ln14_reg_183_pp0_iter4_reg;
wire   [63:0] j_cast1_fu_136_p1;
reg   [63:0] j_cast1_reg_189;
reg   [63:0] j_cast1_reg_189_pp0_iter1_reg;
reg   [63:0] j_cast1_reg_189_pp0_iter2_reg;
reg   [63:0] j_cast1_reg_189_pp0_iter3_reg;
reg   [63:0] j_cast1_reg_189_pp0_iter4_reg;
reg   [63:0] j_cast1_reg_189_pp0_iter5_reg;
reg   [63:0] j_cast1_reg_189_pp0_iter6_reg;
reg   [63:0] j_cast1_reg_189_pp0_iter7_reg;
reg  signed [31:0] fir_int_int_w_load_reg_199;
wire   [31:0] grp_fu_141_p2;
reg   [31:0] mul_ln16_reg_209;
reg   [31:0] Acc_load_reg_214;
reg    ap_enable_reg_pp0_iter6;
wire   [31:0] add_ln16_fu_149_p2;
reg   [31:0] add_ln16_reg_219;
wire   [31:0] grp_fu_153_p2;
reg   [31:0] mul_ln18_reg_224;
wire    ap_CS_fsm_state15;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg   [3:0] ap_phi_mux_j_phi_fu_117_p4;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln16_fu_145_p1;
wire    ap_CS_fsm_state16;
wire  signed [9:0] grp_fu_141_p0;
wire   [4:0] grp_fu_153_p1;
wire    ap_CS_fsm_state11;
wire   [23:0] trunc_ln_fu_158_p4;
reg   [7:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
end

fir_fir_int_int_w #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
fir_int_int_w_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(fir_int_int_w_address0),
    .ce0(fir_int_int_w_ce0),
    .q0(fir_int_int_w_q0)
);

fir_Acc #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
Acc_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(Acc_address0),
    .ce0(Acc_ce0),
    .we0(Acc_we0),
    .d0(add_ln16_reg_219),
    .q0(Acc_q0),
    .address1(Acc_address1),
    .ce1(Acc_ce1),
    .we1(Acc_we1),
    .d1(mul_ln18_reg_224),
    .q1(Acc_q1)
);

fir_mul_10s_32s_32_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_10s_32s_32_5_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_141_p0),
    .din1(in_r),
    .ce(1'b1),
    .dout(grp_fu_141_p2)
);

fir_mul_32s_5ns_32_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 32 ))
mul_32s_5ns_32_5_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(in_r),
    .din1(grp_fu_153_p1),
    .ce(1'b1),
    .dout(grp_fu_153_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter8 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        j_reg_113 <= 4'd15;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln14_reg_179 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        j_reg_113 <= add_ln14_reg_183;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_reg_179_pp0_iter5_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        Acc_load_reg_214 <= Acc_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln14_fu_124_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln14_reg_183 <= add_ln14_fu_130_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln14_reg_183_pp0_iter1_reg <= add_ln14_reg_183;
        icmp_ln14_reg_179 <= icmp_ln14_fu_124_p2;
        icmp_ln14_reg_179_pp0_iter1_reg <= icmp_ln14_reg_179;
        j_cast1_reg_189_pp0_iter1_reg[3 : 0] <= j_cast1_reg_189[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln14_reg_183_pp0_iter2_reg <= add_ln14_reg_183_pp0_iter1_reg;
        add_ln14_reg_183_pp0_iter3_reg <= add_ln14_reg_183_pp0_iter2_reg;
        add_ln14_reg_183_pp0_iter4_reg <= add_ln14_reg_183_pp0_iter3_reg;
        icmp_ln14_reg_179_pp0_iter2_reg <= icmp_ln14_reg_179_pp0_iter1_reg;
        icmp_ln14_reg_179_pp0_iter3_reg <= icmp_ln14_reg_179_pp0_iter2_reg;
        icmp_ln14_reg_179_pp0_iter4_reg <= icmp_ln14_reg_179_pp0_iter3_reg;
        icmp_ln14_reg_179_pp0_iter5_reg <= icmp_ln14_reg_179_pp0_iter4_reg;
        icmp_ln14_reg_179_pp0_iter6_reg <= icmp_ln14_reg_179_pp0_iter5_reg;
        icmp_ln14_reg_179_pp0_iter7_reg <= icmp_ln14_reg_179_pp0_iter6_reg;
        j_cast1_reg_189_pp0_iter2_reg[3 : 0] <= j_cast1_reg_189_pp0_iter1_reg[3 : 0];
        j_cast1_reg_189_pp0_iter3_reg[3 : 0] <= j_cast1_reg_189_pp0_iter2_reg[3 : 0];
        j_cast1_reg_189_pp0_iter4_reg[3 : 0] <= j_cast1_reg_189_pp0_iter3_reg[3 : 0];
        j_cast1_reg_189_pp0_iter5_reg[3 : 0] <= j_cast1_reg_189_pp0_iter4_reg[3 : 0];
        j_cast1_reg_189_pp0_iter6_reg[3 : 0] <= j_cast1_reg_189_pp0_iter5_reg[3 : 0];
        j_cast1_reg_189_pp0_iter7_reg[3 : 0] <= j_cast1_reg_189_pp0_iter6_reg[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_reg_179_pp0_iter6_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln16_reg_219 <= add_ln16_fu_149_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln14_reg_179 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fir_int_int_w_load_reg_199 <= fir_int_int_w_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln14_fu_124_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_cast1_reg_189[3 : 0] <= j_cast1_fu_136_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_reg_179_pp0_iter5_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mul_ln16_reg_209 <= grp_fu_141_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        mul_ln18_reg_224 <= grp_fu_153_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        Acc_address0 = 4'd15;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        Acc_address0 = j_cast1_reg_189_pp0_iter7_reg;
    end else begin
        Acc_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        Acc_address1 = 4'd0;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        Acc_address1 = zext_ln16_fu_145_p1;
    end else begin
        Acc_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1)))) begin
        Acc_ce0 = 1'b1;
    end else begin
        Acc_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1)))) begin
        Acc_ce1 = 1'b1;
    end else begin
        Acc_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln14_reg_179_pp0_iter7_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        Acc_we0 = 1'b1;
    end else begin
        Acc_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        Acc_we1 = 1'b1;
    end else begin
        Acc_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln14_fu_124_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln14_reg_179 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_j_phi_fu_117_p4 = add_ln14_reg_183;
    end else begin
        ap_phi_mux_j_phi_fu_117_p4 = j_reg_113;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fir_int_int_w_ce0 = 1'b1;
    end else begin
        fir_int_int_w_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        out_r_ap_vld = 1'b1;
    end else begin
        out_r_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln14_fu_124_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter8 == 1'b1) & (ap_enable_reg_pp0_iter7 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln14_fu_124_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter8 == 1'b1) & (ap_enable_reg_pp0_iter7 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln14_fu_130_p2 = ($signed(ap_phi_mux_j_phi_fu_117_p4) + $signed(4'd15));

assign add_ln16_fu_149_p2 = (Acc_load_reg_214 + mul_ln16_reg_209);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign fir_int_int_w_address0 = j_cast1_fu_136_p1;

assign grp_fu_141_p0 = fir_int_int_w_load_reg_199;

assign grp_fu_153_p1 = 32'd11;

assign icmp_ln14_fu_124_p2 = ((ap_phi_mux_j_phi_fu_117_p4 == 4'd0) ? 1'b1 : 1'b0);

assign j_cast1_fu_136_p1 = ap_phi_mux_j_phi_fu_117_p4;

assign out_r = $signed(trunc_ln_fu_158_p4);

assign trunc_ln_fu_158_p4 = {{Acc_q0[31:8]}};

assign zext_ln16_fu_145_p1 = add_ln14_reg_183_pp0_iter4_reg;

always @ (posedge ap_clk) begin
    j_cast1_reg_189[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    j_cast1_reg_189_pp0_iter1_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    j_cast1_reg_189_pp0_iter2_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    j_cast1_reg_189_pp0_iter3_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    j_cast1_reg_189_pp0_iter4_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    j_cast1_reg_189_pp0_iter5_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    j_cast1_reg_189_pp0_iter6_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    j_cast1_reg_189_pp0_iter7_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //fir
