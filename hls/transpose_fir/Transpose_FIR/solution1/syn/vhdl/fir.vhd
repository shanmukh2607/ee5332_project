-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fir is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_r : IN STD_LOGIC_VECTOR (31 downto 0);
    out_r : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_r_ap_vld : OUT STD_LOGIC );
end;


architecture behav of fir is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fir_fir,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a35t-cpg236-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=6.860000,HLS_SYN_LAT=2,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1335,HLS_SYN_LUT=943,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_B5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110101";
    constant ap_const_lv32_E2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal Acc1_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal Acc1_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal Acc1_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal Acc1_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal Acc1_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal Acc1_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal Acc1_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal Acc1_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal Acc1_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal Acc1_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal Acc1_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal Acc1_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal Acc1_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal Acc1_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal Acc1_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal in_read_reg_420 : STD_LOGIC_VECTOR (31 downto 0);
    signal in_read_reg_420_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_93_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln26_reg_436 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_99_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln26_1_reg_442 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_105_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln26_2_reg_448 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_111_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln26_3_reg_454 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal add_ln26_1_fu_153_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal add_ln26_2_fu_185_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln26_3_fu_201_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln26_4_fu_232_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln26_5_fu_248_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln26_6_fu_263_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln26_7_fu_294_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln26_8_fu_310_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln26_9_fu_326_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln26_10_fu_341_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln26_11_fu_356_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln26_12_fu_372_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln26_13_fu_387_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln26_14_fu_403_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal grp_fu_93_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_99_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_105_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_111_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln26_fu_133_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln26_1_fu_138_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln26_fu_143_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln26_2_fu_165_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln26_3_fu_170_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln26_1_fu_175_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln26_4_fu_212_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln26_5_fu_217_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln26_15_fu_222_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln26_6_fu_274_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln26_7_fu_279_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln26_2_fu_284_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to1 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component fir_mul_32s_5ns_32_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fir_mul_32s_8ns_32_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fir_mul_32s_9ns_32_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    mul_32s_5ns_32_2_1_U1 : component fir_mul_32s_5ns_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 5,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => in_r,
        din1 => grp_fu_93_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_93_p2);

    mul_32s_8ns_32_2_1_U2 : component fir_mul_32s_8ns_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 8,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => in_r,
        din1 => grp_fu_99_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_99_p2);

    mul_32s_9ns_32_2_1_U3 : component fir_mul_32s_9ns_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 9,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => in_r,
        din1 => grp_fu_105_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_105_p2);

    mul_32s_9ns_32_2_1_U4 : component fir_mul_32s_9ns_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 9,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => in_r,
        din1 => grp_fu_111_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_111_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                Acc1_0 <= mul_ln26_reg_436;
                Acc1_1 <= add_ln26_14_fu_403_p2;
                Acc1_10 <= add_ln26_5_fu_248_p2;
                Acc1_11 <= add_ln26_4_fu_232_p2;
                Acc1_12 <= add_ln26_3_fu_201_p2;
                Acc1_13 <= add_ln26_2_fu_185_p2;
                Acc1_14 <= add_ln26_1_fu_153_p2;
                Acc1_2 <= add_ln26_13_fu_387_p2;
                Acc1_3 <= add_ln26_12_fu_372_p2;
                Acc1_4 <= add_ln26_11_fu_356_p2;
                Acc1_5 <= add_ln26_10_fu_341_p2;
                Acc1_6 <= add_ln26_9_fu_326_p2;
                Acc1_7 <= add_ln26_8_fu_310_p2;
                Acc1_8 <= add_ln26_7_fu_294_p2;
                Acc1_9 <= add_ln26_6_fu_263_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                in_read_reg_420 <= in_r;
                in_read_reg_420_pp0_iter1_reg <= in_read_reg_420;
                mul_ln26_1_reg_442 <= grp_fu_99_p2;
                mul_ln26_2_reg_448 <= grp_fu_105_p2;
                mul_ln26_3_reg_454 <= grp_fu_111_p2;
                mul_ln26_reg_436 <= grp_fu_93_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln26_10_fu_341_p2 <= std_logic_vector(unsigned(Acc1_4) + unsigned(mul_ln26_2_reg_448));
    add_ln26_11_fu_356_p2 <= std_logic_vector(unsigned(Acc1_3) + unsigned(add_ln26_15_fu_222_p2));
    add_ln26_12_fu_372_p2 <= std_logic_vector(unsigned(Acc1_2) + unsigned(mul_ln26_1_reg_442));
    add_ln26_13_fu_387_p2 <= std_logic_vector(unsigned(Acc1_1) + unsigned(sub_ln26_1_fu_175_p2));
    add_ln26_14_fu_403_p2 <= std_logic_vector(unsigned(Acc1_0) + unsigned(sub_ln26_fu_143_p2));
    add_ln26_15_fu_222_p2 <= std_logic_vector(unsigned(shl_ln26_4_fu_212_p2) + unsigned(shl_ln26_5_fu_217_p2));
    add_ln26_1_fu_153_p2 <= std_logic_vector(unsigned(Acc1_13) + unsigned(sub_ln26_fu_143_p2));
    add_ln26_2_fu_185_p2 <= std_logic_vector(unsigned(Acc1_12) + unsigned(sub_ln26_1_fu_175_p2));
    add_ln26_3_fu_201_p2 <= std_logic_vector(unsigned(Acc1_11) + unsigned(mul_ln26_1_reg_442));
    add_ln26_4_fu_232_p2 <= std_logic_vector(unsigned(Acc1_10) + unsigned(add_ln26_15_fu_222_p2));
    add_ln26_5_fu_248_p2 <= std_logic_vector(unsigned(Acc1_9) + unsigned(mul_ln26_2_reg_448));
    add_ln26_6_fu_263_p2 <= std_logic_vector(unsigned(Acc1_8) + unsigned(mul_ln26_3_reg_454));
    add_ln26_7_fu_294_p2 <= std_logic_vector(unsigned(Acc1_7) + unsigned(sub_ln26_2_fu_284_p2));
    add_ln26_8_fu_310_p2 <= std_logic_vector(unsigned(Acc1_6) + unsigned(sub_ln26_2_fu_284_p2));
    add_ln26_9_fu_326_p2 <= std_logic_vector(unsigned(Acc1_5) + unsigned(mul_ln26_3_reg_454));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to1 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_105_p1 <= ap_const_lv32_B5(9 - 1 downto 0);
    grp_fu_111_p1 <= ap_const_lv32_E2(9 - 1 downto 0);
    grp_fu_93_p1 <= ap_const_lv32_B(5 - 1 downto 0);
    grp_fu_99_p1 <= ap_const_lv32_53(8 - 1 downto 0);
    out_r <= std_logic_vector(unsigned(Acc1_14) + unsigned(mul_ln26_reg_436));

    out_r_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            out_r_ap_vld <= ap_const_logic_1;
        else 
            out_r_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln26_1_fu_138_p2 <= std_logic_vector(shift_left(unsigned(in_read_reg_420_pp0_iter1_reg),to_integer(unsigned('0' & ap_const_lv32_3(31-1 downto 0)))));
    shl_ln26_2_fu_165_p2 <= std_logic_vector(shift_left(unsigned(in_read_reg_420_pp0_iter1_reg),to_integer(unsigned('0' & ap_const_lv32_6(31-1 downto 0)))));
    shl_ln26_3_fu_170_p2 <= std_logic_vector(shift_left(unsigned(in_read_reg_420_pp0_iter1_reg),to_integer(unsigned('0' & ap_const_lv32_4(31-1 downto 0)))));
    shl_ln26_4_fu_212_p2 <= std_logic_vector(shift_left(unsigned(in_read_reg_420_pp0_iter1_reg),to_integer(unsigned('0' & ap_const_lv32_7(31-1 downto 0)))));
    shl_ln26_5_fu_217_p2 <= std_logic_vector(shift_left(unsigned(in_read_reg_420_pp0_iter1_reg),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    shl_ln26_6_fu_274_p2 <= std_logic_vector(shift_left(unsigned(in_read_reg_420_pp0_iter1_reg),to_integer(unsigned('0' & ap_const_lv32_8(31-1 downto 0)))));
    shl_ln26_7_fu_279_p2 <= std_logic_vector(shift_left(unsigned(in_read_reg_420_pp0_iter1_reg),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    shl_ln26_fu_133_p2 <= std_logic_vector(shift_left(unsigned(in_read_reg_420_pp0_iter1_reg),to_integer(unsigned('0' & ap_const_lv32_5(31-1 downto 0)))));
    sub_ln26_1_fu_175_p2 <= std_logic_vector(unsigned(shl_ln26_2_fu_165_p2) - unsigned(shl_ln26_3_fu_170_p2));
    sub_ln26_2_fu_284_p2 <= std_logic_vector(unsigned(shl_ln26_6_fu_274_p2) - unsigned(shl_ln26_7_fu_279_p2));
    sub_ln26_fu_143_p2 <= std_logic_vector(unsigned(shl_ln26_fu_133_p2) - unsigned(shl_ln26_1_fu_138_p2));
end behav;
