// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fir_fir,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a35t-cpg236-1,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.690000,HLS_SYN_LAT=94,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=610,HLS_SYN_LUT=251,HLS_VERSION=2020_2}" *)

module fir (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        y,
        y_ap_vld,
        x
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] y;
output   y_ap_vld;
input  [31:0] x;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg y_ap_vld;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [3:0] shift_reg_address0;
reg    shift_reg_ce0;
reg    shift_reg_we0;
wire   [31:0] shift_reg_q0;
wire   [3:0] fir_int_int_c_address0;
reg    fir_int_int_c_ce0;
wire   [31:0] fir_int_int_c_q0;
wire   [31:0] grp_fu_112_p2;
reg   [31:0] acc_reg_154;
wire    ap_CS_fsm_state3;
wire   [63:0] zext_ln14_fu_118_p1;
reg   [63:0] zext_ln14_reg_159;
wire    ap_CS_fsm_state5;
wire   [3:0] add_ln14_fu_129_p2;
reg   [3:0] add_ln14_reg_167;
wire   [0:0] icmp_ln14_fu_123_p2;
reg  signed [31:0] shift_reg_load_reg_182;
wire    ap_CS_fsm_state6;
reg  signed [31:0] fir_int_int_c_load_reg_187;
wire   [31:0] grp_fu_140_p2;
reg   [31:0] mul_ln17_reg_192;
wire    ap_CS_fsm_state9;
wire   [31:0] acc_2_fu_144_p2;
wire    ap_CS_fsm_state10;
reg   [3:0] i_reg_90;
wire    ap_CS_fsm_state4;
reg   [31:0] acc_1_reg_101;
wire   [63:0] zext_ln16_fu_135_p1;
wire   [4:0] grp_fu_112_p1;
wire  signed [9:0] grp_fu_140_p0;
wire    ap_CS_fsm_state7;
reg   [9:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
end

fir_shift_reg #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
shift_reg_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(shift_reg_address0),
    .ce0(shift_reg_ce0),
    .we0(shift_reg_we0),
    .d0(shift_reg_q0),
    .q0(shift_reg_q0)
);

fir_fir_int_int_c #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
fir_int_int_c_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(fir_int_int_c_address0),
    .ce0(fir_int_int_c_ce0),
    .q0(fir_int_int_c_q0)
);

fir_mul_32s_5ns_32_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 32 ))
mul_32s_5ns_32_3_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(x),
    .din1(grp_fu_112_p1),
    .ce(1'b1),
    .dout(grp_fu_112_p2)
);

fir_mul_10s_32s_32_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_10s_32s_32_3_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_140_p0),
    .din1(shift_reg_load_reg_182),
    .ce(1'b1),
    .dout(grp_fu_140_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        acc_1_reg_101 <= acc_reg_154;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        acc_1_reg_101 <= acc_2_fu_144_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_reg_90 <= 4'd15;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        i_reg_90 <= add_ln14_reg_167;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        acc_reg_154 <= grp_fu_112_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_fu_123_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        add_ln14_reg_167 <= add_ln14_fu_129_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        fir_int_int_c_load_reg_187 <= fir_int_int_c_q0;
        shift_reg_load_reg_182 <= shift_reg_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        mul_ln17_reg_192 <= grp_fu_140_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        zext_ln14_reg_159[3 : 0] <= zext_ln14_fu_118_p1[3 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln14_fu_123_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln14_fu_123_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        fir_int_int_c_ce0 = 1'b1;
    end else begin
        fir_int_int_c_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        shift_reg_address0 = zext_ln14_reg_159;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        shift_reg_address0 = zext_ln16_fu_135_p1;
    end else begin
        shift_reg_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        shift_reg_ce0 = 1'b1;
    end else begin
        shift_reg_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        shift_reg_we0 = 1'b1;
    end else begin
        shift_reg_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln14_fu_123_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        y_ap_vld = 1'b1;
    end else begin
        y_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln14_fu_123_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign acc_2_fu_144_p2 = (mul_ln17_reg_192 + acc_1_reg_101);

assign add_ln14_fu_129_p2 = ($signed(i_reg_90) + $signed(4'd15));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign fir_int_int_c_address0 = zext_ln14_fu_118_p1;

assign grp_fu_112_p1 = 32'd11;

assign grp_fu_140_p0 = fir_int_int_c_load_reg_187;

assign icmp_ln14_fu_123_p2 = ((i_reg_90 == 4'd0) ? 1'b1 : 1'b0);

assign y = acc_1_reg_101;

assign zext_ln14_fu_118_p1 = i_reg_90;

assign zext_ln16_fu_135_p1 = add_ln14_fu_129_p2;

always @ (posedge ap_clk) begin
    zext_ln14_reg_159[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //fir
